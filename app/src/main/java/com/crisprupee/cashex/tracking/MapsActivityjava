package com.crisprupee.cashex.tracking;

import android.os.Handler;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.Volley;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.crisprupee.cashex.R;
import com.crisprupee.cashex.TrackPoint;
import com.crisprupee.cashex.Util;
import com.crisprupee.cashex.Vehicle;

import org.json.JSONArray;
import org.json.JSONObject;

import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;

public class MapsActivity extends AppCompatActivity implements OnMapReadyCallback {

    public static GoogleMap mMap;
    private HashMap<String, Marker> mMarkers = new HashMap<>();
    private LatLng currentLocation = null;
    HashMap locationGust = new HashMap();
    TextView trackSpeed;
    private final Handler handler = new Handler();
    private static Marker currentMarker, lastKnownMarker = null;
    private PolylineOptions polyOptions = new PolylineOptions();
    private static Polyline polyline = null;
    long diffInSec = 0;
    String lastRecordedTime = "";
    Vehicle vehicle;
    int delay = 10000;

    final Runnable runnable = new Runnable() {
        @Override
        public void run() {
            displayLocationOnMap();
            handler.postDelayed(this, delay);
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_tracking);
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        vehicle = (Vehicle) getIntent().getSerializableExtra("vehicle");
        trackSpeed = (TextView) findViewById(R.id.speed);
        currentMarker = null;
        setTitle(vehicle.getVehicleName());
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mapFragment.getMapAsync(this);
      //  diffInSec = Util.getTimeDiff("2018-12-23 09:55:00", null, TimeZone.getDefault());
        diffInSec = 0;
        handler.postDelayed(runnable, delay);
    }


    @Override
    protected void onDestroy() {
        super.onDestroy();
        handler.removeCallbacks(runnable);
        currentMarker = null;
        vehicle = null;
        currentLocation = null;
        lastKnownMarker = null;
    }

    @Override
    protected void onPause() {
        super.onPause();
        handler.removeCallbacks(runnable);
        currentMarker = null;
        handler.removeCallbacks(this.runnable);
        vehicle = null;
        currentLocation = null;
        lastKnownMarker = null;
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        vehicle = (Vehicle) getIntent().getSerializableExtra("vehicle");
        displayLastKnownLocation();
        displayLocationOnMap();
    }


    private void displayLastKnownLocation() {
        LatLng currentLocation = new LatLng(vehicle.getLastLat(), vehicle.getLastLong());
        DateFormat dfLocal = new SimpleDateFormat("dd-MMM-yyyy HH:mm", Locale.ROOT);
        dfLocal.setTimeZone(TimeZone.getDefault());
        String dte = "";
        try {
            dte = dfLocal.format(vehicle.getHbTime());
        } catch (Exception e) {
            e.printStackTrace();
        }

        boolean isOnline = vehicle.isOnLine();
        if (!isOnline) {
            lastKnownMarker = mMap.addMarker(new MarkerOptions().position(currentLocation).title("Offline now. Last seen here on " + dte).icon(BitmapDescriptorFactory.fromResource(R.mipmap.car_icon_round)));
            lastKnownMarker.showInfoWindow();
        }
        CameraUpdate locazion = CameraUpdateFactory.newLatLngZoom(currentLocation, 17.0f);
        mMap.animateCamera(locazion);
    }


    private void displayLocationOnMap() {
        String dateTimeStart = (Util.getCurrentGMTTime((diffInSec - 30)));
        String dateTimeEnd = (Util.getCurrentGMTTime((diffInSec + 30)));

        String dateTimeStartEnc = URLEncoder.encode(Util.getCurrentGMTTime((diffInSec - 30)));
        String dateTimeEndEnc = URLEncoder.encode(Util.getCurrentGMTTime((diffInSec + 30)));

        JsonArrayRequest jsonArrayRequest = new JsonArrayRequest(getString(R.string.columbus_ms_url) + "/rest/devices/" + vehicle.getImei() + "/trackpoints?startDateTime=" + dateTimeStartEnc + "&endtDateTime=" + dateTimeEndEnc, new Response.Listener<JSONArray>() {
            @Override
            public void onResponse(JSONArray response) {
                Log.d("MAP ACTIVITY", "Gust Response. Now collecting. Last Recorded Entry for" + lastRecordedTime);
                locationGust.clear();
                for (int i = 0; i < response.length(); i++) {
                    try {
                        if (response.length() > 0) {
                            JSONObject jsonObject = response.getJSONObject(i);
                            String time = jsonObject.getString("gpsTime") + "";
                            Log.d("MAP ACTIVITY", "RECIEVED AN ENTRY FROM SERVER at " + time);
                            if ((time.compareToIgnoreCase(lastRecordedTime)) > 0) {
                                TrackPoint tp = new TrackPoint();
                                tp.setLat(Float.parseFloat(jsonObject.getString("lat") + ""));
                                tp.setLng(Float.parseFloat(jsonObject.getString("lng") + ""));
                                tp.setDirection(Float.parseFloat(jsonObject.getString("direction") + ""));
                                tp.setGpsSpeed(jsonObject.getString("gpsSpeed") + "");
                                tp.setGpsTime(jsonObject.getString("gpsTime") + "");
                                tp.setPosType(jsonObject.getString("posType") + "");
                                locationGust.put(tp.getGpsTime(), tp);
                                Log.d("MAP ACTIVITY", "ADDED to display plan ..." + time);
                            }
                        }
                    } catch (Exception e) {
                        Toast toast = Toast.makeText(getApplicationContext(), "Error ", Toast.LENGTH_SHORT);
                        toast.show();
                        e.printStackTrace();
                    }
                }
                Map<String, Float> sortedLocationGust = new TreeMap<>(locationGust);
                Log.d("MAP ACTIVITY", "PREPARING FOR VEHCLE MOVEMENT ...");
                if (sortedLocationGust.size() == 0) {
                    trackSpeed.setText("0 km/hr");
                }
                for (Map.Entry m : sortedLocationGust.entrySet()) {
                    TrackPoint tp1 = (TrackPoint) m.getValue();
                    currentLocation = new LatLng(tp1.getLat(), tp1.getLng());
                    Log.d("MAP ACTIVITY", "TIME" + m.getKey() + "MOVING VEHICLE ... " + tp1.getLat() + tp1.getLng());
                    trackSpeed.setText(tp1.getGpsSpeed() + " km/hr");
                    if (MapsActivity.currentMarker == null) {
                        lastKnownMarker.remove();
                        currentMarker = mMap.addMarker(new MarkerOptions().position(currentLocation).icon(BitmapDescriptorFactory.fromResource(R.mipmap.car_icon_round)));
                    } else {
                        LatLngInterpolator latLngInterpolator = new LatLngInterpolator.Spherical();
                        MarkerAnimation.animateMarkerToGB(mMap, null, currentMarker, currentLocation, latLngInterpolator, tp1.getDirection() + 20, delay);
                    }
                    currentMarker.hideInfoWindow();
                    lastRecordedTime = m.getKey() + "";
                    CameraUpdate locazion = CameraUpdateFactory.newLatLng(currentLocation);
                    mMap.animateCamera(locazion);
                    break;
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                String UIMessage = "Error. Please try after some time";
                if (error.getClass().toString().contains("com.android.volley.TimeoutError")) {
                    UIMessage = "Unable to connect to internet.";
                }
                Toast toast = Toast.makeText(getApplicationContext(), UIMessage, Toast.LENGTH_SHORT);
                toast.show();
            }
        });
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(jsonArrayRequest);
    }



    private void loginToFirebase() {
        String email = getString(R.string.firebase_email);
        String password = getString(R.string.firebase_password);
        FirebaseAuth.getInstance().signInWithEmailAndPassword(
                email, password).addOnCompleteListener(new OnCompleteListener<AuthResult>() {
            @Override
            public void onComplete(Task<AuthResult> task) {
                if (task.isSuccessful()) {
                    subscribeToUpdates();
                    Log.d("TAG", "firebase auth success");
                } else {
                    Log.d("TAG", "firebase auth failed");
                }
            }
        });
    }

    private void subscribeToUpdates() {
        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(getString(R.string.firebase_path));
        ref.addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String previousChildName) {
                setMarker(dataSnapshot);
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String previousChildName) {
                setMarker(dataSnapshot);
            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String previousChildName) {
            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
            }

            @Override
            public void onCancelled(DatabaseError error) {
                Log.d("TAG", "Failed to read value.", error.toException());
            }
        });

        ref.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                // This method is called once with the initial value and again
                // whenever data at this location is updated.
                String value = dataSnapshot.getValue(String.class);
                Log.d("TAG", "Value is: " + value);
            }

            @Override
            public void onCancelled(DatabaseError error) {
                // Failed to read value
                Log.w("TAG", "Failed to read value.", error.toException());
            }
        });
    }

    private void setMarker(DataSnapshot dataSnapshot) {
        String key = dataSnapshot.getKey();
        HashMap<String, Object> value = (HashMap<String, Object>) dataSnapshot.getValue();
        double lat = Double.parseDouble(value.get("latitude").toString());
        double lng = Double.parseDouble(value.get("longitude").toString());
        LatLng location = new LatLng(lat, lng);
        if (!mMarkers.containsKey(key)) {
            mMarkers.put(key, mMap.addMarker(new MarkerOptions().title(key).position(location)));
        } else {
            mMarkers.get(key).setPosition(location);
        }
        LatLngBounds.Builder builder = new LatLngBounds.Builder();
        for (Marker marker : mMarkers.values()) {
            builder.include(marker.getPosition());
        }
        mMap.animateCamera(CameraUpdateFactory.newLatLngBounds(builder.build(), 300));
    }
}
