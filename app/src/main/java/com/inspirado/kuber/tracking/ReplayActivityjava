package com.inspirado.kuber.tracking;

import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.app.TimePickerDialog;
import android.os.Handler;
import android.support.constraint.ConstraintLayout;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.CardView;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.Volley;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.inspirado.kuber.R;
import TrackPoint;
import Util;
import com.inspirado.kuber.Vehicle;

import org.json.JSONArray;
import org.json.JSONObject;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Hashtable;
import java.util.TimeZone;

public class ReplayActivity extends AppCompatActivity implements OnMapReadyCallback, View.OnClickListener {

    public GoogleMap mMap;
    private int mYear, mMonth, mDay, mHour, mMinute;
    Button fromTimePicker, toTimePicker, playBtn, replayBtn, slowBtn, fastBtn, pauseBtn, stopBtn, resumeBtn, restart;
    TextView fromDate, fromTime, toDate, toTime, trackSpeed, trackDate;
    Vehicle vehicle;
    private TrackPoint currentLocation = null;
    private Marker currentMarker = null;
    private Marker marker = null;
    private final Handler handler = new Handler();
    Hashtable locationMap = new Hashtable();
    int currentPointer = 0;
    ConstraintLayout replayDashboard;
    CardView selectorPanel;
    ConstraintLayout replayRestart, slowFast;
    ArrayList polylines = new ArrayList();
    int delay = 1500;

    TimeZone timeZone = TimeZone.getDefault();
    ProgressDialog progressDialog;
    LatLngBounds bounds;
    final Runnable runnable = new Runnable() {
        @Override
        public void run() {
            displayPointerOnMap();
            handler.postDelayed(this, delay);
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_replay);
        playBtn = (Button) findViewById(R.id.playbackBtn);
        fromTimePicker = (Button) findViewById(R.id.from_time);
        toTimePicker = (Button) findViewById(R.id.to_time);
        replayBtn = (Button) findViewById(R.id.replayBtn);
        slowBtn = (Button) findViewById(R.id.slow);
        fastBtn = (Button) findViewById(R.id.fastBtn);
        pauseBtn = (Button) findViewById(R.id.pauseBtn);
        stopBtn = (Button) findViewById(R.id.stopBtn);
        resumeBtn = (Button) findViewById(R.id.resumeBtn);
        restart = (Button) findViewById(R.id.restart);


        fromDate = (TextView) findViewById(R.id.fromDate);
        fromTime = (TextView) findViewById(R.id.fromTime);
        toDate = (TextView) findViewById(R.id.toDate);
        toTime = (TextView) findViewById(R.id.toTime);
        trackDate = (TextView) findViewById(R.id.track_date);
        trackSpeed = (TextView) findViewById(R.id.track_speed);

        replayDashboard = (ConstraintLayout) findViewById(R.id.replay_dashboard);
        replayRestart = (ConstraintLayout) findViewById(R.id.replay_restart);
        selectorPanel = (CardView) findViewById(R.id.selectorPanel);
        slowFast = (ConstraintLayout) findViewById(R.id.slowFast);

        slowFast.setVisibility(View.GONE);
        selectorPanel.setVisibility(View.VISIBLE);
        replayRestart.setVisibility(View.GONE);
        replayDashboard.setVisibility(View.GONE);

        vehicle = (Vehicle) getIntent().getSerializableExtra("vehicle");
        progressDialog = new ProgressDialog(this);

        fromDate.setText(Util.getCurrentLocalDate(TimeZone.getDefault()));
        fromTime.setText(Util.getCurrentLocalTime(TimeZone.getDefault()));

        toDate.setText(Util.getCurrentLocalDate(TimeZone.getDefault()));
        toTime.setText(Util.getCurrentLocalTime(TimeZone.getDefault()));

        currentPointer = 0;
        marker = null;
        handler.removeCallbacks(this.runnable);

        setTitle(vehicle.getVehicleName());
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }


    @Override
    protected void onDestroy() {
        super.onDestroy();
        currentPointer = 0;
        marker = null;
        handler.removeCallbacks(this.runnable);
        vehicle = null;
        currentLocation = null;
        currentMarker = null;
        marker = null;
        locationMap = null;
        currentPointer = 0;
        polylines = null;
    }

    @Override
    protected void onPause() {
        super.onPause();
        currentPointer = 0;
        marker = null;
        handler.removeCallbacks(this.runnable);
        vehicle = null;
        currentLocation = null;
        currentMarker = null;
        marker = null;
        locationMap = null;
        currentPointer = 0;
        polylines = null;
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        vehicle = (Vehicle) getIntent().getSerializableExtra("vehicle");
        displayCurrentLocation();
    }

    private void displayCurrentLocation() {
        LatLng currentLocation = new LatLng(vehicle.getLastLat(), vehicle.getLastLong());
        currentMarker = mMap.addMarker(new MarkerOptions().position(currentLocation).title(vehicle.getVehicleName() + ": Current Location"));
        currentMarker.showInfoWindow();
        CameraUpdate locazion = CameraUpdateFactory.newLatLngZoom(currentLocation, 13.0f);
        mMap.animateCamera(locazion);
    }

    private void generateLocationTable() {
        String fromDateTime = fromDate.getText() + " " + fromTime.getText();
        String gmtFromDateTime = URLEncoder.encode(Util.getGMTDateTime(fromDateTime, timeZone));
        String toDateTime = toDate.getText() + " " + toTime.getText();
        String gmtToDateTime = URLEncoder.encode(Util.getGMTDateTime(toDateTime, timeZone));
        progressDialog.setMessage("Getting movement details ...");
        progressDialog.show();

        JsonArrayRequest jsonArrayRequest = new JsonArrayRequest(getString(R.string.columbus_ms_url) + "/rest/devices/" + vehicle.getImei() + "/trackpoints?startDateTime=" + gmtFromDateTime + "&endtDateTime=" + gmtToDateTime, new Response.Listener<JSONArray>() {
            @Override
            public void onResponse(JSONArray response) {
                progressDialog.hide();
                LatLngBounds.Builder builder = new LatLngBounds.Builder();
                for (int i = 0; i < response.length(); i++) {
                    try {
                        JSONObject jsonObject = response.getJSONObject(i);
                        TrackPoint tp = new TrackPoint();
                        tp.setLat(Float.parseFloat(jsonObject.getString("lat") + ""));
                        tp.setLng(Float.parseFloat(jsonObject.getString("lng") + ""));
                        tp.setDirection(Float.parseFloat(jsonObject.getString("direction") + ""));
                        tp.setGpsSpeed(jsonObject.getString("gpsSpeed") + "");
                        tp.setGpsTime(jsonObject.getString("gpsTime") + "");
                        tp.setPosType(jsonObject.getString("posType") + "");
                        replayDashboard.setVisibility(View.VISIBLE);
                        locationMap.put(i, tp);
                        builder.include(new LatLng(tp.getLat(), tp.getLng()));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (response.length() > 0) {
                    bounds = builder.build();
                    TrackPoint firstPosition = (TrackPoint) locationMap.get(currentPointer); //null check
                    if (firstPosition != null) {
                        slowFast.setVisibility(View.VISIBLE);
                        replayRestart.setVisibility(View.GONE);
                        selectorPanel.setVisibility(View.GONE);
                        displayPointerOnMap();
                    }
                } else {
                    Toast toast = Toast.makeText(getApplicationContext(), "No movement in this period ", Toast.LENGTH_SHORT);
                    toast.show();
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                progressDialog.hide();
                String UIMessage = "Error. Please try after some time";
                if (error.getClass().toString().contains("com.android.volley.TimeoutError")) {
                    UIMessage = "Unable to connect to internet.";
                }
                Toast toast = Toast.makeText(getApplicationContext(), UIMessage, Toast.LENGTH_SHORT);
                toast.show();
            }
        });
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(jsonArrayRequest);

    }

    private void displayPointerOnMap() {
        currentLocation = (TrackPoint) locationMap.get(currentPointer);
        if (currentLocation != null) {
            LatLng latLng = new LatLng(currentLocation.getLat(), currentLocation.getLng());
            if (marker == null) {
                marker = mMap.addMarker(new MarkerOptions().flat(true).position(latLng).icon(BitmapDescriptorFactory.fromResource(R.mipmap.car_icon_round)));
            } else {
                LatLngInterpolator latLngInterpolator = new LatLngInterpolator.Spherical();
                MarkerAnimation.animateMarkerToGB(mMap, polylines, marker, latLng, latLngInterpolator, currentLocation.getDirection() + 15, delay);
            }
            CameraUpdate locazion = CameraUpdateFactory.newLatLng(marker.getPosition());
            mMap.animateCamera(locazion);
            trackDate.setText(Util.getLocalDateTime(currentLocation.getGpsTime(), timeZone));
            trackSpeed.setText(currentLocation.getGpsSpeed());
            if (currentPointer >= locationMap.size() - 1) {
                replayRestart.setVisibility(View.VISIBLE);
                slowFast.setVisibility(View.GONE);
                CameraUpdate cu = CameraUpdateFactory.newLatLngBounds(bounds, 56);
                mMap.animateCamera(cu);
                trackDate.setText("");
                trackSpeed.setText("");
            }
        }
        currentPointer++;
    }


    private void replayAgain() {
        handler.removeCallbacks(this.runnable);
        currentPointer = 0;
        marker.remove();
        marker = null;
        for (int i = 0; i < polylines.size(); i++) {
            ((Polyline) polylines.get(i)).remove();
        }
        replayRestart.setVisibility(View.GONE);
        slowFast.setVisibility(View.VISIBLE);
        handler.postDelayed(runnable, delay);
    }

    private void stop() {
        marker.remove();
        marker = null;
        for (int i = 0; i < polylines.size(); i++) {
            ((Polyline) polylines.get(i)).remove();
        }
        replayRestart.setVisibility(View.GONE);
        slowFast.setVisibility(View.GONE);
        replayDashboard.setVisibility(View.GONE);
        selectorPanel.setVisibility(View.VISIBLE);
        handler.removeCallbacks(this.runnable);
        currentPointer = 0;
        locationMap.clear();

    }


    private void pause() {
        handler.removeCallbacks(this.runnable);
    }

    @Override
    public void onClick(View v) {
        if ((v == slowBtn)) {
            delay = delay + 100;
            int duration = Toast.LENGTH_SHORT;
            Toast toast = Toast.makeText(getApplicationContext(), "Speed decreased ", duration);
            toast.show();

        }
        if ((v == fastBtn)) {
            delay = delay - 100;
            if (delay <= 500) {
                delay = 500;
            }
            int duration = Toast.LENGTH_SHORT;
            Toast toast = Toast.makeText(getApplicationContext(), "Speed increased ", duration);
            toast.show();

        }
        if ((v == stopBtn)) {
            stop();
        }
        if ((v == pauseBtn)) {
            pause();
            pauseBtn.setVisibility(View.GONE);
            resumeBtn.setVisibility(View.VISIBLE);
        }
        if ((v == replayBtn)) {
            replayAgain();
        }
        if ((v == resumeBtn)) {
            slowFast.setVisibility(View.VISIBLE);
            replayRestart.setVisibility(View.GONE);
            pauseBtn.setVisibility(View.VISIBLE);
            resumeBtn.setVisibility(View.GONE);
            handler.postDelayed(runnable, delay);

        }
        if ((v == playBtn)) {
            generateLocationTable();
            LatLng firstLatLng = new LatLng(vehicle.getLastLat(), vehicle.getLastLong());
            CameraUpdate locazion = CameraUpdateFactory.newLatLngZoom(firstLatLng, 17.0f);
            mMap.animateCamera(locazion);
            handler.postDelayed(runnable, delay);
        }
        if ((v == restart)) {
            stop();
        }
        if ((v == toTimePicker)) {
            final Calendar c = Calendar.getInstance();
            mYear = c.get(Calendar.YEAR);
            mMonth = c.get(Calendar.MONTH);
            mDay = c.get(Calendar.DAY_OF_MONTH);
            DatePickerDialog datePickerDialog = new DatePickerDialog(this,
                    new DatePickerDialog.OnDateSetListener() {
                        @Override
                        public void onDateSet(DatePicker view, int year,
                                              int monthOfYear, int dayOfMonth) {
                            toDate.setText(dayOfMonth + "-" + (monthOfYear + 1) + "-" + year);
                        }
                    }, mYear, mMonth, mDay);
            datePickerDialog.show();
        }
        if ((v == fromTimePicker)) {
            final Calendar c = Calendar.getInstance();
            mYear = c.get(Calendar.YEAR);
            mMonth = c.get(Calendar.MONTH);
            mDay = c.get(Calendar.DAY_OF_MONTH);
            DatePickerDialog datePickerDialog = new DatePickerDialog(this,
                    new DatePickerDialog.OnDateSetListener() {
                        @Override
                        public void onDateSet(DatePicker view, int year,
                                              int monthOfYear, int dayOfMonth) {
                            fromDate.setText(dayOfMonth + "-" + (monthOfYear + 1) + "-" + year);
                        }
                    }, mYear, mMonth, mDay);
            datePickerDialog.show();
        }
        if ((v == fromTimePicker)) {

            // Get Current Time
            final Calendar c = Calendar.getInstance();
            mHour = c.get(Calendar.HOUR_OF_DAY);
            mMinute = c.get(Calendar.MINUTE);

            // Launch Time Picker Dialog
            TimePickerDialog timePickerDialog = new TimePickerDialog(this,
                    new TimePickerDialog.OnTimeSetListener() {

                        @Override
                        public void onTimeSet(TimePicker view, int hourOfDay,
                                              int minute) {

                            fromTime.setText(hourOfDay + ":" + minute);
                        }
                    }, mHour, mMinute, false);
            timePickerDialog.show();
        }
        if ((v == toTimePicker)) {

            // Get Current Time
            final Calendar c = Calendar.getInstance();
            mHour = c.get(Calendar.HOUR_OF_DAY);
            mMinute = c.get(Calendar.MINUTE);

            // Launch Time Picker Dialog
            TimePickerDialog timePickerDialog = new TimePickerDialog(this,
                    new TimePickerDialog.OnTimeSetListener() {

                        @Override
                        public void onTimeSet(TimePicker view, int hourOfDay,
                                              int minute) {

                            toTime.setText(hourOfDay + ":" + minute);
                        }
                    }, mHour, mMinute, false);
            timePickerDialog.show();
        }
    }
}
