package com.inspirado.kuber.tracking;

import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.Volley;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.inspirado.kuber.R;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.TimeZone;

public class MapsAllActivity extends AppCompatActivity implements OnMapReadyCallback {

    public static GoogleMap mMap;
    private HashMap<String, Marker> mMarkers = new HashMap<>();
    private LatLng currentLocation = null;
    private HashMap markers = new HashMap();
    String username;
    private final Handler handler = new Handler();
    //  int i=0;
    private static Marker currentMarker = null;
    private PolylineOptions polyOptions = new PolylineOptions();
    private static Polyline polyline = null;
    final Runnable runnable = new Runnable() {
        @Override
        public void run() {
            //   i = i + 2;
            displayLocationOnMap(username);
            handler.postDelayed(this, 10000);
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_tracking);
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        username = getIntent().getStringExtra("username");
        mapFragment.getMapAsync(this);
        findViewById(R.id.speed).setVisibility(View.GONE);

        setTitle("Map View - All Vehicles");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        handler.postDelayed(runnable, 10000);
    }


    @Override
    protected void onDestroy() {
        super.onDestroy();
        handler.removeCallbacks(runnable);
    }

    @Override
    protected void onPause() {
        super.onPause();
        handler.removeCallbacks(runnable);
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        username = getIntent().getStringExtra("username");
        displayLocationOnMap(username);
    }


    private void displayLocationOnMap(String username) {
        LatLng location = null;
        JsonArrayRequest jsonArrayRequest = new JsonArrayRequest(getString(R.string.columbus_ms_url) + "/rest/devices?username=" + username, new Response.Listener<JSONArray>() {
            @Override
            public void onResponse(JSONArray response) {
                LatLngBounds.Builder builder = new LatLngBounds.Builder();
                JSONObject jsonObject;
                for (int i = 0; i < response.length(); i++) {
                    try {
                        jsonObject = response.getJSONObject(i);
                        Log.d("TAG", "onResponse: "+i+"   "+jsonObject);

                        double lat = Double.parseDouble(jsonObject.getString("lastLat") + "");
                        double lng = Double.parseDouble(jsonObject.getString("lastLong") + "");
                        String deviceId = jsonObject.getString("id") + "";
                        String dateStr = jsonObject.getString("gpsTime") + "";
                        currentLocation = new LatLng(lat, lng);
                        DateFormat dfGMT = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy", Locale.ROOT);
                        dfGMT.setTimeZone(TimeZone.getTimeZone("UTC"));
                        DateFormat dfLocal = new SimpleDateFormat("dd-MM-yyyy HH:mm", Locale.ROOT);
                        dfLocal.setTimeZone(TimeZone.getDefault());
                        Date dte;
                        String displayDate = "";
                        try {
                            dte = dfGMT.parse(dateStr);
                            displayDate =  dfLocal.format(dte);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        String message = jsonObject.getString("vehicleName");
                        boolean isOnline = (jsonObject.getString("onLine") + "").equalsIgnoreCase("true");
                        if (!isOnline) {
                            message = message+" Offline now. Last seen here on "+displayDate ;
                        }


                        if (markers.get(deviceId) == null) {
                            currentMarker = MapsAllActivity.mMap.addMarker(new MarkerOptions().position(currentLocation).title(message).icon(BitmapDescriptorFactory.fromResource(R.mipmap.car_icon_round)));
                            markers.put(deviceId, currentMarker);
                        } else {
                            LatLngInterpolator latLngInterpolator = new LatLngInterpolator.Spherical();
                            MarkerAnimation.animateMarkerToGB(mMap, null, (Marker) markers.get(deviceId), currentLocation, latLngInterpolator, 0, 800);
                         }
                        ((Marker) markers.get(deviceId)).setTitle(message);
              //          ((Marker) markers.get(deviceId)).showInfoWindow();

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    builder.include(currentLocation);
                }
                mMap.animateCamera(CameraUpdateFactory.newLatLngBounds(builder.build(), 300));
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                Log.e("Volley", error.toString());
            }
        });
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(jsonArrayRequest);
    }

    private void loginToFirebase() {
        String email = getString(R.string.firebase_email);
        String password = getString(R.string.firebase_password);
        FirebaseAuth.getInstance().signInWithEmailAndPassword(
                email, password).addOnCompleteListener(new OnCompleteListener<AuthResult>() {
            @Override
            public void onComplete(Task<AuthResult> task) {
                if (task.isSuccessful()) {
                    subscribeToUpdates();
                    Log.d("TAG", "firebase auth success");
                } else {
                    Log.d("TAG", "firebase auth failed");
                }
            }
        });
    }

    private void subscribeToUpdates() {
        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(getString(R.string.firebase_path));
        ref.addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String previousChildName) {
                setMarker(dataSnapshot);
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String previousChildName) {
                setMarker(dataSnapshot);
            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String previousChildName) {
            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
            }

            @Override
            public void onCancelled(DatabaseError error) {
                Log.d("TAG", "Failed to read value.", error.toException());
            }
        });

        ref.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                // This method is called once with the initial value and again
                // whenever data at this location is updated.
                String value = dataSnapshot.getValue(String.class);
                Log.d("TAG", "Value is: " + value);
            }

            @Override
            public void onCancelled(DatabaseError error) {
                // Failed to read value
                Log.w("TAG", "Failed to read value.", error.toException());
            }
        });
    }

    private void setMarker(DataSnapshot dataSnapshot) {
        // When a location update is received, put or update
        // its value in mMarkers, which contains all the markers
        // for locations received, so that we can build the
        // boundaries required to show them all on the map at once
        String key = dataSnapshot.getKey();
        HashMap<String, Object> value = (HashMap<String, Object>) dataSnapshot.getValue();
        double lat = Double.parseDouble(value.get("latitude").toString());
        double lng = Double.parseDouble(value.get("longitude").toString());
        LatLng location = new LatLng(lat, lng);
        if (!mMarkers.containsKey(key)) {
            mMarkers.put(key, mMap.addMarker(new MarkerOptions().title(key).position(location)));
        } else {
            mMarkers.get(key).setPosition(location);
        }
        LatLngBounds.Builder builder = new LatLngBounds.Builder();
        for (Marker marker : mMarkers.values()) {
            builder.include(marker.getPosition());
        }
        mMap.animateCamera(CameraUpdateFactory.newLatLngBounds(builder.build(), 300));
    }
}
